#continuous segment of an underlying array
#variable typed (elements can be added or removed)
#more flexible

Slice: pointer, length, capacity

<slice_name> := []<data_type>{<values>}
   grades := []int{10, 20, 30}
   
   
   package main
   import "fmt"
   func main() {
        slice := []int{10, 20, 30}
        fmt.Println(slice)
    }
    >>> go run main.go
    [10 20 30]
    
    
   package main
   import "fmt"
   func main() {
        arr := [10]int{10, 20, 30, 40, 50, 60, 70, 80, 90, 100}
        slice_1 := arr[1:8]
        fmt.Println(slice_1)
    }
    >>> go run main.go
    [20 30 40 50 60 70 80]
    
    
   package main
   import "fmt"
   func main() {
        arr := [10]int{10, 20, 30, 40, 50, 60, 70, 80, 90, 100}
        slice := arr[1:8]
        fmt.Println(slice)
        
        sub_slice := slice[0:3]
        fmt.Println(sub_slice)
    }
    >>> go run main.go
    [20 30 40 50 60 70 80]
    [20 30 40]
    
    
  #slice := make([]<data_type>, length, capacity)  
  #  slice := make([]int, 5, 10)
  
  package main
  import "fmt"
  func main() {
        slice := make([]int, 5, 8)
        fmt.Println(slice)
        fmt.Println(len(slice))
        fmt.Println(cap(slice))
   }
   >>> go run main.go
   [0 0 0 0 0]
   5
   8
   
   
   package main
   import "fmt"
   func main() {
        arr := [10]int{10, 20, 30, 40, 50, 60, 70, 80, 90, 100}
        slice := arr[1:8]
        fmt.Println(cap(arr))
        fmt.Println(cap(slice))
   }
   >>> go run main.go
   10
   9
   
#slice and index numbers
package main
import "fmt"
func main() {
     arr := [5]int{10, 20, 30, 40, 50}
     slice := arr[:3] #will print 0,1,2 till 3
     fmt.Println(arr)
     fmt.Println(slice)
     slice[1] = 9000     #we are going to modify indx 1
     
     fmt.Println("after modification")
     fmt.Println(arr)
     fmt.Println(slice)
}
 >>> go run main.go
 [10 20 30 40 50]
 [10 20 30]
 after modification
 [10 9000 30 40 50]
 [10 9000 30]
 
 
 #appending to a slice
 #func append(s []T, vs ...T) []T
 slice = append(slice, element-1, element-2)
 slice = append(slice, 10, 20, 30)
 
package main
import "fmt"
func main() {
     arr := [4]int{10, 20, 30, 40}
     slice := arr[1:3]    #will print 1,2 
     fmt.Println(slice)
     fmt.Println(len(slice))
     fmt.Println(cap(slice))
     slice = append(slice, 900, -90, 50)   
     
     fmt.Println(slice)
     fmt.Println(len(slice))
     fmt.Println(cap(slice))
}
 >>> go run main.go
 [20 30]
 2
 3
 [20 30 900 -90 50]
 5
 6
 
 #appending to a slice
 #slice = append(slice, anotherSlice...)
 
package main
import "fmt"
func main() {
     arr := [5]int{10, 20, 30, 40, 50}
     slice := arr[:2]
     arr_2 := [5]int{5, 15, 25, 35, 45}
     slice_2 := arr_2[:2]
     new_slice := append(slice, slice_2...)
     fmt.Println(new_slice)
 }
 >>> go run main.go
 [10 20 5 15]
 
 
#deleting from a slice
package main
import "fmt"
func main() {
     arr := [5]int{10, 20, 30, 40, 50}
     i := 2
     fmt.Println(arr)
     slice_1 := arr[:i]
     slice_2 := arr[i+1:]
     new_slice := append(slice_1, slice_2...)
     fmt.Println(new_slice)
  }
>>> go run main.go
[10 20 30 40 50]
[10 20 40 50]

#copying from a slice
func copy(dst, src []Type) int
num := copy(dest_slice, src_slice)

package main
import "fmt"
func main() {
      src_slice := []int{10, 20, 30, 40, 50}
      dest_slice := make([]int, 3)
      num := copy(dest_slice, src_slice)
      fmt.Println(dest_slice)
      fmt.Println("Number of elements copied: ", num)
  }
  >>> go run main.go
  [10 20 30]
  Number of elements copied: 3
  
#looping through a slice
package main
import "fmt"
func main() {
      arr := []int{10, 20, 30, 40, 50}
      for index, value := range arr {
         fmt.Println(index, "=>", value)
      }
 }
 >>> go run main.go
 0 => 10
 1 => 20
 2 => 30
 3 => 40
 4 => 50
 
package main
import "fmt"
func main() {
      arr := []int{10, 20, 30, 40, 50}
      for _, value := range arr {
         fmt.Println(value)
      }
 }
 >>> go run main.go
 10
 20
 30
 40
 50
