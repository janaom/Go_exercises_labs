#bitwise AND (&) #takes 2 numbers as operands and does AND on every bit of 2 numbers
package main
import "fmt"
func main() {
     var x, y int = 12, 25
     z := x & y
     fmt.Println(z)
 }
 >>> go tun main.go
 8

12 = 00001100 (in binary)
25 = 00011001 (in binary)

00001100
&
00011001
00001000 = 8 (in decimal)


#bitwise OR (|) #takes 2 numbers as operands and does OR on every bit of 2 numbers
12 = 00001100 (in binary)
25 = 00011001 (in binary)

00001100
|
00011001
00011101 = 29 (in decimal)

package main
import "fmt"
func main() {
     var x, y int = 12, 25
     z := x | y
     fmt.Println(z)
 }
 >>> go tun main.go
 29
 
 #bitwise XOR (^) # takes 2 numbers as operands and does XOR on every bit of 2 numbers
 #the result of XOR is 1 if the 2 bits are opposite
 
00001100
^
00011001
00010101 = 21 (in decimal)

package main
import "fmt"
func main() {
     var x, y int = 12, 25
     z := x ^ y
     fmt.Println(z)
 }
 >>> go tun main.go
 21
 
 #left shift (<<) #shifts all bits towards left by a certain number of specified bits
 #the bit positions that have been vacated by the left shift operator are filled with 0
 
 212 = 11010100 (in binary)
 212 << 1
 11010100
 110101000 = 424 (in decimal) #shift by 1 to the left
 
package main
import "fmt"
func main() {
     var x int = 212
     z := x << 1
     fmt.Println(z)
 }
 >>> go tun main.go
 424
 
 #right shift (>>) #shifts all bits towards right by a certain number of specified bits
 #excess bits shifted off to the right are discarded
 
 212 = 11010100 (in binary)
 212 >> 2
 11010100
 00110101 = 53 (in decimal) #shift by 1 to the right
 
package main
import "fmt"
func main() {
     var x int = 212
     z := x >> 2
     fmt.Println(z)
 }
 >>> go tun main.go
 53
